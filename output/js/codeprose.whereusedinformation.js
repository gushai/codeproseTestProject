whereUsedInformation = {"45":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":43,"sourceSample":["\n\nobject Example {\n  \n  def main(args: ","Array","[String]): Unit = {\n  \n    val A = new Rational(1,7) \n    val B = new Rational(1)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":397,"sourceSample":["\n\n\n\nobject ImplicitSuff {\n  \n  def main(args: ","Array","[String]): Unit = {\n\n    // Implicit parameter\n    implicit val implicitBase = new Base()"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":974,"sourceSample":["\n\n\n\nobject OtherStuff{\n  \n  def main(args: ","Array","[String]): Unit = {\n    \n    val a = 1985\n    val other = new OtherStuff()"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1761,"sourceSample":["\n\nobject RationalExample {\n  \n  def main(args: ","Array","[String]): Unit = {\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new Rational(1,7)"]}],"98":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1489,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  ","def"," * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]}],"34":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":189,"sourceSample":["/*\n*Companion Object\n*================\n*\n* Test jump to companion object.\n*\n*/\n\n","class"," Companion(foo: String)\n\nobject Companion {\n  def apply(foo: String) = new Companion(foo)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":199,"sourceSample":["\n\nclass Companion(foo: String)\n\n","object"," Companion {\n  def apply(foo: String) = new Companion(foo)\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":217,"sourceSample":["\n\nobject Companion {\n  def apply(foo: String) = new ","Companion","(foo)\n}\n\ntrait CompanionTest {"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":250,"sourceSample":["\n\n\tdef bar() : Unit = {\n\t\tval a = ","Companion","(\"a\");\n\t}\n\n}"]}],"67":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":886,"sourceSample":["\n    \n  }\n  \n  def foo[","T","](a: Int, b: T) : T = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":895,"sourceSample":["\n    \n  }\n  \n  def foo[T](a: Int, ","b",": T) : T = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":898,"sourceSample":["\n    \n  }\n  \n  def foo[T](a: Int, b: ","T",") : T = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":903,"sourceSample":["\n    \n  }\n  \n  def foo[T](a: Int, b: T) : ","T"," = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":916,"sourceSample":["\n    println(a)\n    return ","b","\n  }\n  \n  \n  class Key(name: Symbol){"]}],"93":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1327,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  ","def"," multiply(that: Int) : Rational = this.multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1526,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = ","multiply","(that)\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]}],"66":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":884,"sourceSample":["\n    \n  }\n  \n  ","def"," foo[T](a: Int, b: T) : T = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1047,"sourceSample":["\n    val B = 314 + A\n    \n    val double = ","other",".foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }\n    \n  }"]}],"89":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1214,"sourceSample":[" \n    new Rational(\n        ","this",".numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]}],"51":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":514,"sourceSample":["\n  def withFunctionArugment(a: Int,shifter: (Int) => Int) : Int = {\n    ","shifter","(a)\n  }\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":593,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    ","shifter","(b) + shifter(a)\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":600,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    shifter(b) + ","shifter","(a)\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":654,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + ","shifter","(b) + shifter(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":661,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + ","shifter","(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":707,"sourceSample":["\n    \n    \n    val curryPartial = foo.currying(5)_\n    val curryFull = ","curryPartial","(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":708,"sourceSample":["\n    \n    \n    val curryPartial = foo.currying(5)_\n    val curryFull = ","curryPartial","(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":754,"sourceSample":["\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = ","curryWithFuncPartial","(5)(5)\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":755,"sourceSample":["\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = ","curryWithFuncPartial","(5)(5)\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":792,"sourceSample":["\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = ","curryWithFuncAndImplicitPartial","(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":793,"sourceSample":["\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = ","curryWithFuncAndImplicitPartial","(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":833,"sourceSample":["\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = ","curryWithAnonFuncAndImplPart","(11)(11)\n}\n\n\n"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":834,"sourceSample":["\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = ","curryWithAnonFuncAndImplPart","(11)(11)\n}\n\n\n"]}],"8":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":38,"sourceSample":["\n\nobject Example {\n  \n  ","def"," main(args: Array[String]): Unit = {\n  \n    val A = new Rational(1,7) \n    val B = new Rational(1)"]}],"73":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":933,"sourceSample":["\n  \n  \n  class Key(name: Symbol){\n    ","type"," Value\n  }\n\n  val someKey = new Key('someKey){ type Value = Int}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":953,"sourceSample":["\n  }\n\n  val someKey = new Key('someKey){ ","type"," Value = Int}\n  \n}\n\n\n\nobject OtherStuff{"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1075,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ ","type"," Value = Double }\n    \n  }\n  \n}"]}],"78":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":64,"sourceSample":["\n  \n  def main(args: Array[String]): Unit = {\n  \n    val A = new ","Rational","(1,7) \n    val B = new Rational(1)\n    val C = A + B"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":79,"sourceSample":["\n  \n    val A = new Rational(1,7) \n    val B = new ","Rational","(1)\n    val C = A + B\n   \n    println(A + \" + \" + B + \" = \" + C)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1022,"sourceSample":["\n    \n      \n    // Implicit conversion\n    val A = ","Rational","(5)\n    val B = 314 + A\n    \n    val double = other.foo[Double](1,1.0)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1101,"sourceSample":["/*\n * Rational\n * --------\n *\n * Rational represents a rational number in Scala.\n * \n */\n","class"," Rational (n: Int, d: Int){\n\n  require(d!=0)\n  private val g = gcd(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1190,"sourceSample":["/*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */\n  def add (that: ","Rational",") : Rational = { \n    new Rational(\n        this.numerator*that.denominator + that.numerator*this.denominator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1195,"sourceSample":["/*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */\n  def add (that: Rational) : ","Rational"," = { \n    new Rational(\n        this.numerator*that.denominator + that.numerator*this.denominator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1203,"sourceSample":["\n  def add (that: Rational) : Rational = { \n    new ","Rational","(\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1206,"sourceSample":[" \n    new Rational(\n        ","this",".numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1220,"sourceSample":[" \n    new Rational(\n        this.numerator*that.denominator + that.numerator*","this",".denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1225,"sourceSample":["\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        ","this",".denominator*that.denominator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1252,"sourceSample":["/*\n   * Overloaded Addition\n   * \n   * Allows the addition of an Int to a Rational number.\n   */\n  def add (that: Int) : ","Rational"," = {\n    this.add(new Rational(that))\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1258,"sourceSample":["\n  def add (that: Int) : Rational = {\n    ","this",".add(new Rational(that))\n  }\n    \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1264,"sourceSample":["\n  def add (that: Int) : Rational = {\n    this.add(new ","Rational","(that))\n  }\n    \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1282,"sourceSample":["/*\n   * ### Multiplication\n   */\n  def multiply (that: ","Rational",") : Rational = {\n      new Rational(\n          this.numerator * that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1287,"sourceSample":["/*\n   * ### Multiplication\n   */\n  def multiply (that: Rational) : ","Rational"," = {\n      new Rational(\n          this.numerator * that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1295,"sourceSample":["\n  def multiply (that: Rational) : Rational = {\n      new ","Rational","(\n          this.numerator * that.numerator,\n          this.denominator * that.denominator"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1298,"sourceSample":["\n      new Rational(\n          ","this",".numerator * that.numerator,\n          this.denominator * that.denominator\n          )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1309,"sourceSample":["\n          this.numerator * that.numerator,\n          ","this",".denominator * that.denominator\n          )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1337,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : ","Rational"," = this.multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1341,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : Rational = ","this",".multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1347,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : Rational = this.multiply(new ","Rational","(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1363,"sourceSample":["/*\n   * ### Subtraction\n   */\n  def subtract (that: ","Rational",") : Rational = {\n    new Rational(\n        this.numerator*that.denominator - this.denominator*that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1368,"sourceSample":["/*\n   * ### Subtraction\n   */\n  def subtract (that: Rational) : ","Rational"," = {\n    new Rational(\n        this.numerator*that.denominator - this.denominator*that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1376,"sourceSample":["\n  def subtract (that: Rational) : Rational = {\n    new ","Rational","(\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1379,"sourceSample":["\n    new Rational(\n        ","this",".numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1389,"sourceSample":["\n    new Rational(\n        this.numerator*that.denominator - ","this",".denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1398,"sourceSample":["\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        ","this",".denominator*that.numerator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1425,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : ","Rational"," = this.subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1429,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : Rational = ","this",".subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1435,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : Rational = this.subtract(new ","Rational","(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1451,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (that: ","Rational",") : Rational = add(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1456,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (that: Rational) : ","Rational"," = add(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1478,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  def + (that: Int) : ","Rational"," = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1495,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: ","Rational",") : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1500,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : ","Rational"," = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1522,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : ","Rational"," = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1539,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: ","Rational",") : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1544,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : ","Rational"," = subtract(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1566,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : ","Rational"," = subtract(that)\n\n  /*\n   * Visibly appealing toString() output.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1664,"sourceSample":["/*\n * Companion Object \n * ----------------\n * \n * The Rational companion object implements several factory methods.\n *\n */\n","object"," Rational {\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1682,"sourceSample":["\nobject Rational {\n\n  def apply(n: Int) = new ","Rational","(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1709,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new ","Rational","(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1730,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = ","Rational","(l)\n}\n\n"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1788,"sourceSample":["\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new ","Rational","(1,7) \n    val B = new Rational(1)\n    val C = Rational(77,344)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1803,"sourceSample":["\n    val A = new Rational(1,7) \n    val B = new ","Rational","(1)\n    val C = Rational(77,344)\n    val G = A + B"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1814,"sourceSample":[" \n    val B = new Rational(1)\n    val C = ","Rational","(77,344)\n    val G = A + B\n    val D = A.add(B)"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1965,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  implicit def intToRational(l: Int) = ","Rational","(l)\n  \n}"]}],"19":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":399,"sourceSample":["\n\n\n\nobject ImplicitSuff {\n  \n  def main(args: Array[","String","]): Unit = {\n\n    // Implicit parameter\n    implicit val implicitBase = new Base()"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":976,"sourceSample":["\n\n\n\nobject OtherStuff{\n  \n  def main(args: Array[","String","]): Unit = {\n    \n    val a = 1985\n    val other = new OtherStuff()"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1763,"sourceSample":["\n\nobject RationalExample {\n  \n  def main(args: Array[","String","]): Unit = {\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new Rational(1,7)"]}],"100":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1533,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  ","def"," - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]}],"62":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":854,"sourceSample":["\nclass OtherStuff(){\n    \n  ","def"," notImplemented() = ???\n  \n  def doesNothing(a: Int) : Unit = {\n    \n  }"]}],"4":[{"srcFilename":"/!README.scala","link":"/content/_!README.scala.html","tokenId":9,"sourceSample":["","package"," org.codeprose.test.text\n/*\n * Codeprose Test Project \n * ======================\n *\n *\n * Content\n * -------\n * \n * 1. What is Codeprose?\n * 2. How to Use Codeprose?\n * 3. Supported Markdown Features\n *  \n * \n * What is Codeprose?\n * ------------------\n * \n * Codeprose is a literate programming tool for Scala. It generates HTML output including \n * syntax highlighting and source code annotated with compile time information. \n * \n * Tokens are enriched with detailed type information, links to declaration and \n * type definition as well as information about implicit conversions and parameters. \n * \n * Further, both type and package summaries as well as 'where used' information is provided.\n *  \n * In the spirit of literate programming Codeprose allows syntax formatting via Markdown \n * in comments. Compile time information is obtained by interfacing with the editor \n * service ENSIME which guarantees independence from the Scala compiler and improves \n * re-usability and maintenance.\n *   \n * Codeprose's design makes it easily extendible to other or mixtures of languages and \n * offers the possibility of introducing other output formats such as, for example, LaTeX.\n *\n *\n */"]},{"srcFilename":"/!README.scala","link":"/content/_!README.scala.html","tokenId":9,"sourceSample":["package ","org",".codeprose.test.text\n/*\n * Codeprose Test Project \n * ======================\n *\n *\n * Content\n * -------\n * \n * 1. What is Codeprose?\n * 2. How to Use Codeprose?\n * 3. Supported Markdown Features\n *  \n * \n * What is Codeprose?\n * ------------------\n * \n * Codeprose is a literate programming tool for Scala. It generates HTML output including \n * syntax highlighting and source code annotated with compile time information. \n * \n * Tokens are enriched with detailed type information, links to declaration and \n * type definition as well as information about implicit conversions and parameters. \n * \n * Further, both type and package summaries as well as 'where used' information is provided.\n *  \n * In the spirit of literate programming Codeprose allows syntax formatting via Markdown \n * in comments. Compile time information is obtained by interfacing with the editor \n * service ENSIME which guarantees independence from the Scala compiler and improves \n * re-usability and maintenance.\n *   \n * Codeprose's design makes it easily extendible to other or mixtures of languages and \n * offers the possibility of introducing other output formats such as, for example, LaTeX.\n *\n *\n */"]}],"88":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1184,"sourceSample":["/*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */\n  ","def"," add (that: Rational) : Rational = { \n    new Rational(\n        this.numerator*that.denominator + that.numerator*this.denominator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1260,"sourceSample":["\n  def add (that: Int) : Rational = {\n    ","this",".add(new Rational(that))\n  }\n    \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1460,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (that: Rational) : Rational = ","add","(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1841,"sourceSample":["\n    val G = A + B\n    val D = ","A",".add(B)\n   \n    // Implicit conversion\n    val E = 5 + D"]}],"77":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1022,"sourceSample":["\n    \n      \n    // Implicit conversion\n    val A = ","Rational","(5)\n    val B = 314 + A\n    \n    val double = other.foo[Double](1,1.0)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1670,"sourceSample":["\nobject Rational {\n\n  ","def"," apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1730,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = ","Rational","(l)\n}\n\n"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1965,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  implicit def intToRational(l: Int) = ","Rational","(l)\n  \n}"]}],"40":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":312,"sourceSample":["/**\n   * bar uses an implicit parameter of SomeClass.\n   */\n  ","def"," bar(b: Int) : Int = {\n\t\tb+c.a\n\t}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":440,"sourceSample":["\n\n    val foo = new ImplicitStuff()\n\n    ","foo",".bar(1)  \n\n    implicit val shift = 10\n    \n    val somenumber = foo.add(1,2)"]}],"110":[{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1912,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(","5"," + \" + \" + D + \" = \" + E)\n\n  }\n}"]}],"15":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":58,"sourceSample":["\n  \n  def main(args: Array[String]): Unit = {\n  \n    ","val"," A = new Rational(1,7) \n    val B = new Rational(1)\n    val C = A + B"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":64,"sourceSample":["\n  \n  def main(args: Array[String]): Unit = {\n  \n    val A = new ","Rational","(1,7) \n    val B = new Rational(1)\n    val C = A + B"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":73,"sourceSample":["\n  \n    val A = new Rational(1,7) \n    ","val"," B = new Rational(1)\n    val C = A + B\n   \n    println(A + \" + \" + B + \" = \" + C)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":79,"sourceSample":["\n  \n    val A = new Rational(1,7) \n    val B = new ","Rational","(1)\n    val C = A + B\n   \n    println(A + \" + \" + B + \" = \" + C)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":86,"sourceSample":[" \n    val B = new Rational(1)\n    ","val"," C = A + B\n   \n    println(A + \" + \" + B + \" = \" + C)\n\n  }"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":90,"sourceSample":[" \n    val B = new Rational(1)\n    val C = ","A"," + B\n   \n    println(A + \" + \" + B + \" = \" + C)\n\n  }"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":94,"sourceSample":[" \n    val B = new Rational(1)\n    val C = A + ","B","\n   \n    println(A + \" + \" + B + \" = \" + C)\n\n  }"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":98,"sourceSample":["\n    val C = A + B\n   \n    println(","A"," + \" + \" + B + \" = \" + C)\n\n  }\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":106,"sourceSample":["\n    val C = A + B\n   \n    println(A + \" + \" + ","B"," + \" = \" + C)\n\n  }\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":114,"sourceSample":["\n    val C = A + B\n   \n    println(A + \" + \" + B + \" = \" + ","C",")\n\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1018,"sourceSample":["\n    \n      \n    // Implicit conversion\n    ","val"," A = Rational(5)\n    val B = 314 + A\n    \n    val double = other.foo[Double](1,1.0)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1022,"sourceSample":["\n    \n      \n    // Implicit conversion\n    val A = ","Rational","(5)\n    val B = 314 + A\n    \n    val double = other.foo[Double](1,1.0)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1029,"sourceSample":["// Implicit conversion\n    val A = Rational(5)\n    ","val"," B = 314 + A\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1037,"sourceSample":["// Implicit conversion\n    val A = Rational(5)\n    val B = 314 + ","A","\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1101,"sourceSample":["/*\n * Rational\n * --------\n *\n * Rational represents a rational number in Scala.\n * \n */\n","class"," Rational (n: Int, d: Int){\n\n  require(d!=0)\n  private val g = gcd(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1187,"sourceSample":["/*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */\n  def add (","that",": Rational) : Rational = { \n    new Rational(\n        this.numerator*that.denominator + that.numerator*this.denominator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1190,"sourceSample":["/*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */\n  def add (that: ","Rational",") : Rational = { \n    new Rational(\n        this.numerator*that.denominator + that.numerator*this.denominator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1195,"sourceSample":["/*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */\n  def add (that: Rational) : ","Rational"," = { \n    new Rational(\n        this.numerator*that.denominator + that.numerator*this.denominator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1203,"sourceSample":["\n  def add (that: Rational) : Rational = { \n    new ","Rational","(\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1206,"sourceSample":[" \n    new Rational(\n        ","this",".numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1210,"sourceSample":[" \n    new Rational(\n        this.numerator*","that",".denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1216,"sourceSample":[" \n    new Rational(\n        this.numerator*that.denominator + ","that",".numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1220,"sourceSample":[" \n    new Rational(\n        this.numerator*that.denominator + that.numerator*","this",".denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1225,"sourceSample":["\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        ","this",".denominator*that.denominator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1229,"sourceSample":["\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*","that",".denominator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1252,"sourceSample":["/*\n   * Overloaded Addition\n   * \n   * Allows the addition of an Int to a Rational number.\n   */\n  def add (that: Int) : ","Rational"," = {\n    this.add(new Rational(that))\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1258,"sourceSample":["\n  def add (that: Int) : Rational = {\n    ","this",".add(new Rational(that))\n  }\n    \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1264,"sourceSample":["\n  def add (that: Int) : Rational = {\n    this.add(new ","Rational","(that))\n  }\n    \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1279,"sourceSample":["/*\n   * ### Multiplication\n   */\n  def multiply (","that",": Rational) : Rational = {\n      new Rational(\n          this.numerator * that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1282,"sourceSample":["/*\n   * ### Multiplication\n   */\n  def multiply (that: ","Rational",") : Rational = {\n      new Rational(\n          this.numerator * that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1287,"sourceSample":["/*\n   * ### Multiplication\n   */\n  def multiply (that: Rational) : ","Rational"," = {\n      new Rational(\n          this.numerator * that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1295,"sourceSample":["\n  def multiply (that: Rational) : Rational = {\n      new ","Rational","(\n          this.numerator * that.numerator,\n          this.denominator * that.denominator"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1298,"sourceSample":["\n      new Rational(\n          ","this",".numerator * that.numerator,\n          this.denominator * that.denominator\n          )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1304,"sourceSample":["\n      new Rational(\n          this.numerator * ","that",".numerator,\n          this.denominator * that.denominator\n          )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1309,"sourceSample":["\n          this.numerator * that.numerator,\n          ","this",".denominator * that.denominator\n          )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1315,"sourceSample":["\n          this.numerator * that.numerator,\n          this.denominator * ","that",".denominator\n          )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1337,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : ","Rational"," = this.multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1341,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : Rational = ","this",".multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1347,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : Rational = this.multiply(new ","Rational","(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1360,"sourceSample":["/*\n   * ### Subtraction\n   */\n  def subtract (","that",": Rational) : Rational = {\n    new Rational(\n        this.numerator*that.denominator - this.denominator*that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1363,"sourceSample":["/*\n   * ### Subtraction\n   */\n  def subtract (that: ","Rational",") : Rational = {\n    new Rational(\n        this.numerator*that.denominator - this.denominator*that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1368,"sourceSample":["/*\n   * ### Subtraction\n   */\n  def subtract (that: Rational) : ","Rational"," = {\n    new Rational(\n        this.numerator*that.denominator - this.denominator*that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1376,"sourceSample":["\n  def subtract (that: Rational) : Rational = {\n    new ","Rational","(\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1379,"sourceSample":["\n    new Rational(\n        ","this",".numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1383,"sourceSample":["\n    new Rational(\n        this.numerator*","that",".denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1389,"sourceSample":["\n    new Rational(\n        this.numerator*that.denominator - ","this",".denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1393,"sourceSample":["\n    new Rational(\n        this.numerator*that.denominator - this.denominator*","that",".numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1398,"sourceSample":["\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        ","this",".denominator*that.numerator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1402,"sourceSample":["\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*","that",".numerator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1425,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : ","Rational"," = this.subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1429,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : Rational = ","this",".subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1435,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : Rational = this.subtract(new ","Rational","(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1448,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (","that",": Rational) : Rational = add(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1451,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (that: ","Rational",") : Rational = add(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1456,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (that: Rational) : ","Rational"," = add(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1462,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  def + (that: Rational) : Rational = add(","that",")\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1478,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  def + (that: Int) : ","Rational"," = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1492,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (","that",": Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1495,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: ","Rational",") : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1500,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : ","Rational"," = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1506,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(","that",")  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1522,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : ","Rational"," = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1536,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (","that",": Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1539,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: ","Rational",") : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1544,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : ","Rational"," = subtract(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1550,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(","that",")\n  def - (that: Int) : Rational = subtract(that)\n\n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1566,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : ","Rational"," = subtract(that)\n\n  /*\n   * Visibly appealing toString() output.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1664,"sourceSample":["/*\n * Companion Object \n * ----------------\n * \n * The Rational companion object implements several factory methods.\n *\n */\n","object"," Rational {\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1682,"sourceSample":["\nobject Rational {\n\n  def apply(n: Int) = new ","Rational","(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1709,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new ","Rational","(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1730,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = ","Rational","(l)\n}\n\n"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1782,"sourceSample":["\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    ","val"," A = new Rational(1,7) \n    val B = new Rational(1)\n    val C = Rational(77,344)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1788,"sourceSample":["\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new ","Rational","(1,7) \n    val B = new Rational(1)\n    val C = Rational(77,344)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1797,"sourceSample":["\n    val A = new Rational(1,7) \n    ","val"," B = new Rational(1)\n    val C = Rational(77,344)\n    val G = A + B"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1803,"sourceSample":["\n    val A = new Rational(1,7) \n    val B = new ","Rational","(1)\n    val C = Rational(77,344)\n    val G = A + B"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1810,"sourceSample":[" \n    val B = new Rational(1)\n    ","val"," C = Rational(77,344)\n    val G = A + B\n    val D = A.add(B)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1814,"sourceSample":[" \n    val B = new Rational(1)\n    val C = ","Rational","(77,344)\n    val G = A + B\n    val D = A.add(B)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1823,"sourceSample":["\n    val C = Rational(77,344)\n    ","val"," G = A + B\n    val D = A.add(B)\n   \n    "]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1827,"sourceSample":["\n    val C = Rational(77,344)\n    val G = ","A"," + B\n    val D = A.add(B)\n   \n    "]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1831,"sourceSample":["\n    val C = Rational(77,344)\n    val G = A + ","B","\n    val D = A.add(B)\n   \n    "]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1835,"sourceSample":["\n    val G = A + B\n    ","val"," D = A.add(B)\n   \n    // Implicit conversion\n    val E = 5 + D"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1839,"sourceSample":["\n    val G = A + B\n    val D = ","A",".add(B)\n   \n    // Implicit conversion\n    val E = 5 + D"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1843,"sourceSample":["\n    val G = A + B\n    val D = A.add(","B",")\n   \n    // Implicit conversion\n    val E = 5 + D"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1850,"sourceSample":["\n   \n    // Implicit conversion\n    ","val"," E = 5 + D  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1858,"sourceSample":["\n   \n    // Implicit conversion\n    val E = 5 + ","D","  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1862,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(","A"," + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1870,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(A + \" + \" + ","B"," + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1878,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(A + \" + \" + B + \" = \" + ","C",")\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1883,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(","C"," + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1891,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + ","D"," + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1900,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (","C"," + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1904,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + ","D","))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1918,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + ","D"," + \" = \" + E)\n\n  }\n}"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1926,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + ","E",")\n\n  }\n}"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1965,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  implicit def intToRational(l: Int) = ","Rational","(l)\n  \n}"]}],"104":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1691,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  ","def"," apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1814,"sourceSample":[" \n    val B = new Rational(1)\n    val C = ","Rational","(77,344)\n    val G = A + B\n    val D = A.add(B)"]}],"90":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1241,"sourceSample":["/*\n   * Overloaded Addition\n   * \n   * Allows the addition of an Int to a Rational number.\n   */\n  ","def"," add (that: Int) : Rational = {\n    this.add(new Rational(that))\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1482,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  def + (that: Int) : Rational = ","add","(that)\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]}],"9":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":50,"sourceSample":["\n\nobject Example {\n  \n  def main(args: Array[String]): ","Unit"," = {\n  \n    val A = new Rational(1,7) \n    val B = new Rational(1)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":238,"sourceSample":["\n\ntrait CompanionTest {\n\n\tdef bar() : ","Unit"," = {\n\t\tval a = Companion(\"a\");\n\t}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":404,"sourceSample":["\n\n\n\nobject ImplicitSuff {\n  \n  def main(args: Array[String]): ","Unit"," = {\n\n    // Implicit parameter\n    implicit val implicitBase = new Base()"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":874,"sourceSample":["\n    \n  def notImplemented() = ???\n  \n  def doesNothing(a: Int) : ","Unit"," = {\n    \n  }\n  \n  def foo[T](a: Int, b: T) : T = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":981,"sourceSample":["\n\n\n\nobject OtherStuff{\n  \n  def main(args: Array[String]): ","Unit"," = {\n    \n    val a = 1985\n    val other = new OtherStuff()"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1768,"sourceSample":["\n\nobject RationalExample {\n  \n  def main(args: Array[String]): ","Unit"," = {\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new Rational(1,7)"]}],"44":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":392,"sourceSample":["\n\n\n\nobject ImplicitSuff {\n  \n  ","def"," main(args: Array[String]): Unit = {\n\n    // Implicit parameter\n    implicit val implicitBase = new Base()"]}],"33":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":191,"sourceSample":["/*\n*Companion Object\n*================\n*\n* Test jump to companion object.\n*\n*/\n\nclass Companion(","foo",": String)\n\nobject Companion {\n  def apply(foo: String) = new Companion(foo)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":207,"sourceSample":["\n\nobject Companion {\n  def apply(","foo",": String) = new Companion(foo)\n}\n\ntrait CompanionTest {"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":219,"sourceSample":["\n\nobject Companion {\n  def apply(foo: String) = new Companion(","foo",")\n}\n\ntrait CompanionTest {"]}],"22":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":104,"sourceSample":["\n    val C = A + B\n   \n    println(","A"," + \" + \" + B + \" = \" + C)\n\n  }\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":108,"sourceSample":["\n    val C = A + B\n   \n    println(","A"," + \" + \" + B + \" = \" + C)\n\n  }\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":112,"sourceSample":["\n    val C = A + B\n   \n    println(","A"," + \" + \" + B + \" = \" + C)\n\n  }\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1587,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  override def toString = ","\"(\""," + numerator + \"/\" + denominator + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1591,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  override def toString = ","\"(\""," + numerator + \"/\" + denominator + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1595,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  override def toString = ","\"(\""," + numerator + \"/\" + denominator + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1599,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  override def toString = ","\"(\""," + numerator + \"/\" + denominator + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1868,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(","A"," + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1872,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(","A"," + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1876,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(","A"," + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1889,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(","C"," + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1893,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(","C"," + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1897,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(","C"," + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1916,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(","5"," + \" + \" + D + \" = \" + E)\n\n  }\n}"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1920,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(","5"," + \" + \" + D + \" = \" + E)\n\n  }\n}"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1924,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(","5"," + \" + \" + D + \" = \" + E)\n\n  }\n}"]}],"55":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":561,"sourceSample":["\n  }\n  \n  ","def"," curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":742,"sourceSample":["\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = ","foo",".curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)\n    \n    implicit val base = 4"]}],"26":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":137,"sourceSample":["\n\n  trait Bar {\n    ","val"," foo = 42\n  }\n\n  object innerobject {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":283,"sourceSample":["\nclass Base(){\n\t","val"," a = 1\n}\n"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":314,"sourceSample":["/**\n   * bar uses an implicit parameter of SomeClass.\n   */\n  def bar(","b",": Int) : Int = {\n\t\tb+c.a\n\t}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":317,"sourceSample":["/**\n   * bar uses an implicit parameter of SomeClass.\n   */\n  def bar(b: ","Int",") : Int = {\n\t\tb+c.a\n\t}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":322,"sourceSample":["/**\n   * bar uses an implicit parameter of SomeClass.\n   */\n  def bar(b: Int) : ","Int"," = {\n\t\tb+c.a\n\t}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":328,"sourceSample":["\n  def bar(b: Int) : Int = {\n\t\t","b","+c.a\n\t}\n  \n  "]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":332,"sourceSample":["\n  def bar(b: Int) : Int = {\n\t\tb+","c",".a\n\t}\n  \n  "]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":342,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(","a",": Int, b: Int)(implicit shift: Int) : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":345,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(a: ","Int",", b: Int)(implicit shift: Int) : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":348,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(a: Int, ","b",": Int)(implicit shift: Int) : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":351,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(a: Int, b: ","Int",")(implicit shift: Int) : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":356,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(a: Int, b: Int)(implicit ","shift",": Int) : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":359,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(a: Int, b: Int)(implicit shift: ","Int",") : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":364,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  def add(a: Int, b: Int)(implicit shift: Int) : ","Int"," = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":370,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    ","a","+b+c.a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":372,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    a+","b","+c.a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":376,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    a+b+","c",".a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":378,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    a+b+c.a+","shift","\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":449,"sourceSample":["\n\n    foo.bar(1)  \n\n    implicit ","val"," shift = 10\n    \n    val somenumber = foo.add(1,2)\n    \n\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":457,"sourceSample":["  \n\n    implicit val shift = 10\n    \n    ","val"," somenumber = foo.add(1,2)\n    \n\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":489,"sourceSample":["/*\n   * Function Argument.\n   */\n  def withFunctionArugment(","a",": Int,shifter: (Int) => Int) : Int = {\n    shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":492,"sourceSample":["/*\n   * Function Argument.\n   */\n  def withFunctionArugment(a: ","Int",",shifter: (Int) => Int) : Int = {\n    shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":498,"sourceSample":["/*\n   * Function Argument.\n   */\n  def withFunctionArugment(a: Int,shifter: (","Int",") => Int) : Int = {\n    shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":503,"sourceSample":["/*\n   * Function Argument.\n   */\n  def withFunctionArugment(a: Int,shifter: (Int) => ","Int",") : Int = {\n    shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":508,"sourceSample":["/*\n   * Function Argument.\n   */\n  def withFunctionArugment(a: Int,shifter: (Int) => Int) : ","Int"," = {\n    shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":516,"sourceSample":["\n  def withFunctionArugment(a: Int,shifter: (Int) => Int) : Int = {\n    shifter(","a",")\n  }\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":525,"sourceSample":["\n  }\n  \n  def currying(","a",": Int)(b: Int)(c: Int) : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":528,"sourceSample":["\n  }\n  \n  def currying(a: ","Int",")(b: Int)(c: Int) : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":531,"sourceSample":["\n  }\n  \n  def currying(a: Int)(","b",": Int)(c: Int) : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":534,"sourceSample":["\n  }\n  \n  def currying(a: Int)(b: ","Int",")(c: Int) : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":537,"sourceSample":["\n  }\n  \n  def currying(a: Int)(b: Int)(","c",": Int) : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":540,"sourceSample":["\n  }\n  \n  def currying(a: Int)(b: Int)(c: ","Int",") : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":545,"sourceSample":["\n  }\n  \n  def currying(a: Int)(b: Int)(c: Int) : ","Int"," = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":551,"sourceSample":["\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {\n    ","a","+b+c\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":553,"sourceSample":["\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {\n    a+","b","+c\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":555,"sourceSample":["\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {\n    a+b+","c","\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":566,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: ","Int"," => Int)(a: Int)(b: Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":570,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: Int => ","Int",")(a: Int)(b: Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":573,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(","a",": Int)(b: Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":576,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: ","Int",")(b: Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":579,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(","b",": Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":582,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: ","Int",") : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":587,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : ","Int"," = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":595,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    shifter(","b",") + shifter(a)\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":602,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    shifter(b) + shifter(","a",")\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":615,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: ","Int"," => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":619,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => ","Int",")(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":622,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(","a",": Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":625,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: ","Int",")(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":628,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: Int)(","b",": Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":631,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: Int)(b: ","Int",")(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":636,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: Int)(b: Int)(implicit ","base",": Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":639,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: ","Int",") : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":644,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : ","Int"," = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":650,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    ","base"," + shifter(b) + shifter(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":656,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(","b",") + shifter(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":663,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(","a",")\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":703,"sourceSample":["\n    \n    \n    val curryPartial = foo.currying(5)_\n    ","val"," curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":723,"sourceSample":["\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (","x",": Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":725,"sourceSample":["\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: ","Int",") => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":730,"sourceSample":["\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: Int) => ","x","+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":750,"sourceSample":["\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    ","val"," curryWithFunc = curryWithFuncPartial(5)(5)\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":766,"sourceSample":["\n    val curryWithFunc = curryWithFuncPartial(5)(5)\n    \n    ","implicit"," val base = 4\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":788,"sourceSample":["\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_\n    ","val"," curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":812,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((","x",": Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":814,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: ","Int",") => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":819,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => ","x"," + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":829,"sourceSample":["\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    ","val"," curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}\n\n\n"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":866,"sourceSample":["\n    \n  def notImplemented() = ???\n  \n  def doesNothing(","a",": Int) : Unit = {\n    \n  }\n  \n  def foo[T](a: Int, b: T) : T = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":869,"sourceSample":["\n    \n  def notImplemented() = ???\n  \n  def doesNothing(a: ","Int",") : Unit = {\n    \n  }\n  \n  def foo[T](a: Int, b: T) : T = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":889,"sourceSample":["\n    \n  }\n  \n  def foo[T](","a",": Int, b: T) : T = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":892,"sourceSample":["\n    \n  }\n  \n  def foo[T](a: ","Int",", b: T) : T = {\n    println(a)\n    return b"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":911,"sourceSample":["\n  \n  def foo[T](a: Int, b: T) : T = {\n    println(","a",")\n    return b\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":957,"sourceSample":["\n  }\n\n  val someKey = new Key('someKey){ type Value = ","Int","}\n  \n}\n\n\n\nobject OtherStuff{"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":989,"sourceSample":["\n  \n  def main(args: Array[String]): Unit = {\n    \n    ","val"," a = 1985\n    val other = new OtherStuff()\n    other.doesNothing(a)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1011,"sourceSample":["\n    val other = new OtherStuff()\n    other.doesNothing(","a",")\n    \n      \n    // Implicit conversion\n    val A = Rational(5)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1104,"sourceSample":["/*\n * Rational\n * --------\n *\n * Rational represents a rational number in Scala.\n * \n */\nclass Rational (","n",": Int, d: Int){\n\n  require(d!=0)\n  private val g = gcd(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1107,"sourceSample":["/*\n * Rational\n * --------\n *\n * Rational represents a rational number in Scala.\n * \n */\nclass Rational (n: ","Int",", d: Int){\n\n  require(d!=0)\n  private val g = gcd(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1110,"sourceSample":["/*\n * Rational\n * --------\n *\n * Rational represents a rational number in Scala.\n * \n */\nclass Rational (n: Int, ","d",": Int){\n\n  require(d!=0)\n  private val g = gcd(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1113,"sourceSample":["/*\n * Rational\n * --------\n *\n * Rational represents a rational number in Scala.\n * \n */\nclass Rational (n: Int, d: ","Int","){\n\n  require(d!=0)\n  private val g = gcd(n,d)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1119,"sourceSample":["\nclass Rational (n: Int, d: Int){\n\n  require(","d","!=0)\n  private val g = gcd(n,d)\n  val numerator   = n/g"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1128,"sourceSample":["\n\n  require(d!=0)\n  ","private"," val g = gcd(n,d)\n  val numerator   = n/g\n  val denominator = d/g"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1134,"sourceSample":["\n\n  require(d!=0)\n  private val g = gcd(","n",",d)\n  val numerator   = n/g\n  val denominator = d/g"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1136,"sourceSample":["\n\n  require(d!=0)\n  private val g = gcd(n,","d",")\n  val numerator   = n/g\n  val denominator = d/g"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1141,"sourceSample":["\n  private val g = gcd(n,d)\n  ","val"," numerator   = n/g\n  val denominator = d/g\n  \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1145,"sourceSample":["\n  private val g = gcd(n,d)\n  val numerator   = ","n","/g\n  val denominator = d/g\n  \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1147,"sourceSample":["\n  private val g = gcd(n,d)\n  val numerator   = n/","g","\n  val denominator = d/g\n  \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1151,"sourceSample":["\n  val numerator   = n/g\n  ","val"," denominator = d/g\n  \n  /*\n   * Overloaded constructor to allow initialization via a single Int.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1155,"sourceSample":["\n  val numerator   = n/g\n  val denominator = ","d","/g\n  \n  /*\n   * Overloaded constructor to allow initialization via a single Int.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1157,"sourceSample":["\n  val numerator   = n/g\n  val denominator = d/","g","\n  \n  /*\n   * Overloaded constructor to allow initialization via a single Int.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1165,"sourceSample":["/*\n   * Overloaded constructor to allow initialization via a single Int.\n   */\n  def this(","n",": Int) = this(n,1)\n  \n  /*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1168,"sourceSample":["/*\n   * Overloaded constructor to allow initialization via a single Int.\n   */\n  def this(n: ","Int",") = this(n,1)\n  \n  /*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1175,"sourceSample":["/*\n   * Overloaded constructor to allow initialization via a single Int.\n   */\n  def this(n: Int) = this(","n",",1)\n  \n  /*\n   * ### Addition \n   * \n   * Addition of 2 Rational numbers.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1208,"sourceSample":[" \n    new Rational(\n        ","this",".numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1212,"sourceSample":[" \n    new Rational(\n        this.numerator*","that",".denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1218,"sourceSample":[" \n    new Rational(\n        this.numerator*that.denominator + ","that",".numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1222,"sourceSample":[" \n    new Rational(\n        this.numerator*that.denominator + that.numerator*","this",".denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1227,"sourceSample":["\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        ","this",".denominator*that.denominator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1231,"sourceSample":["\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*","that",".denominator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1244,"sourceSample":["/*\n   * Overloaded Addition\n   * \n   * Allows the addition of an Int to a Rational number.\n   */\n  def add (","that",": Int) : Rational = {\n    this.add(new Rational(that))\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1247,"sourceSample":["/*\n   * Overloaded Addition\n   * \n   * Allows the addition of an Int to a Rational number.\n   */\n  def add (that: ","Int",") : Rational = {\n    this.add(new Rational(that))\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1266,"sourceSample":["\n  def add (that: Int) : Rational = {\n    this.add(new Rational(","that","))\n  }\n    \n  "]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1300,"sourceSample":["\n      new Rational(\n          ","this",".numerator * that.numerator,\n          this.denominator * that.denominator\n          )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1306,"sourceSample":["\n      new Rational(\n          this.numerator * ","that",".numerator,\n          this.denominator * that.denominator\n          )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1311,"sourceSample":["\n          this.numerator * that.numerator,\n          ","this",".denominator * that.denominator\n          )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1317,"sourceSample":["\n          this.numerator * that.numerator,\n          this.denominator * ","that",".denominator\n          )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1329,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(","that",": Int) : Rational = this.multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1332,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: ","Int",") : Rational = this.multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1349,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : Rational = this.multiply(new Rational(","that","))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1381,"sourceSample":["\n    new Rational(\n        ","this",".numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1385,"sourceSample":["\n    new Rational(\n        this.numerator*","that",".denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1391,"sourceSample":["\n    new Rational(\n        this.numerator*that.denominator - ","this",".denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1395,"sourceSample":["\n    new Rational(\n        this.numerator*that.denominator - this.denominator*","that",".numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1400,"sourceSample":["\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        ","this",".denominator*that.numerator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1404,"sourceSample":["\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*","that",".numerator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1417,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (","that",": Int) : Rational = this.subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1420,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: ","Int",") : Rational = this.subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1437,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : Rational = this.subtract(new Rational(","that","))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1470,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  def + (","that",": Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1473,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  def + (that: ","Int",") : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1484,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  def + (that: Int) : Rational = add(","that",")\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1514,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (","that",": Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1517,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: ","Int",") : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1528,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(","that",")\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1558,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (","that",": Int) : Rational = subtract(that)\n\n  /*\n   * Visibly appealing toString() output.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1561,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: ","Int",") : Rational = subtract(that)\n\n  /*\n   * Visibly appealing toString() output.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1572,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(","that",")\n\n  /*\n   * Visibly appealing toString() output.\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1589,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  override def toString = \"(\" + ","numerator"," + \"/\" + denominator + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1597,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  override def toString = \"(\" + numerator + \"/\" + ","denominator"," + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1613,"sourceSample":["/**\n   * Calculates the greatest common divisor.\n   * @param a A whole number\n   * @param b A whole number\n   * @return The largest positive integer that divides a and b without a remainder.\n   */\t\n  private def gcd(","a",": Int, b: Int) : Int = {\n    if(b==0) a else gcd(b, a % b)\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1616,"sourceSample":["/**\n   * Calculates the greatest common divisor.\n   * @param a A whole number\n   * @param b A whole number\n   * @return The largest positive integer that divides a and b without a remainder.\n   */\t\n  private def gcd(a: ","Int",", b: Int) : Int = {\n    if(b==0) a else gcd(b, a % b)\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1619,"sourceSample":["/**\n   * Calculates the greatest common divisor.\n   * @param a A whole number\n   * @param b A whole number\n   * @return The largest positive integer that divides a and b without a remainder.\n   */\t\n  private def gcd(a: Int, ","b",": Int) : Int = {\n    if(b==0) a else gcd(b, a % b)\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1622,"sourceSample":["/**\n   * Calculates the greatest common divisor.\n   * @param a A whole number\n   * @param b A whole number\n   * @return The largest positive integer that divides a and b without a remainder.\n   */\t\n  private def gcd(a: Int, b: ","Int",") : Int = {\n    if(b==0) a else gcd(b, a % b)\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1627,"sourceSample":["/**\n   * Calculates the greatest common divisor.\n   * @param a A whole number\n   * @param b A whole number\n   * @return The largest positive integer that divides a and b without a remainder.\n   */\t\n  private def gcd(a: Int, b: Int) : ","Int"," = {\n    if(b==0) a else gcd(b, a % b)\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1635,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(","b","==0) a else gcd(b, a % b)\n  }\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1640,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(b==0) ","a"," else gcd(b, a % b)\n  }\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1646,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(b==0) a else gcd(","b",", a % b)\n  }\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1649,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(b==0) a else gcd(b, ","a"," % b)\n  }\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1653,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(b==0) a else gcd(b, a % ","b",")\n  }\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1672,"sourceSample":["\nobject Rational {\n\n  def apply(","n",": Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1675,"sourceSample":["\nobject Rational {\n\n  def apply(n: ","Int",") = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1684,"sourceSample":["\nobject Rational {\n\n  def apply(n: Int) = new Rational(","n",",1)\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1693,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(","n",": Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1696,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: ","Int",", d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1699,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, ","d",": Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1702,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: ","Int",") = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1711,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(","n",",d)\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1713,"sourceSample":["\n\n  def apply(n: Int) = new Rational(n,1)\n  def apply(n: Int, d: Int) = new Rational(n,","d",")\n\n  implicit def intToRational(l: Int) = Rational(l)\n}"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1722,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(","l",": Int) = Rational(l)\n}\n\n"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1725,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: ","Int",") = Rational(l)\n}\n\n"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1732,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  implicit def intToRational(l: Int) = Rational(","l",")\n}\n\n"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1957,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  implicit def intToRational(","l",": Int) = Rational(l)\n  \n}"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1960,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  implicit def intToRational(l: ","Int",") = Rational(l)\n  \n}"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1967,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  implicit def intToRational(l: Int) = Rational(","l",")\n  \n}"]}],"37":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":232,"sourceSample":["\n\ntrait CompanionTest {\n\n\t","def"," bar() : Unit = {\n\t\tval a = Companion(\"a\");\n\t}"]}],"68":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":909,"sourceSample":["\n  \n  def foo[T](a: Int, b: T) : T = {\n    ","println","(a)\n    return b\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1774,"sourceSample":["\n  \n  def main(args: Array[String]): Unit = {\n  \n    ","println","(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new Rational(1,7) \n    val B = new Rational(1)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1860,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    ","println","(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1881,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    ","println","(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1908,"sourceSample":["\n    println(C + \" + \" + D + \" = \" + (C + D))\n    ","println","(5 + \" + \" + D + \" = \" + E)\n\n  }\n}"]}],"61":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":847,"sourceSample":["/*\n * Other Stuff\n * ----------- \n */\n","class"," OtherStuff(){\n    \n  def notImplemented() = ???\n  \n  def doesNothing(a: Int) : Unit = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":964,"sourceSample":["\n  \n}\n\n\n\n","object"," OtherStuff{\n  \n  def main(args: Array[String]): Unit = {\n    \n    val a = 1985"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":997,"sourceSample":["\n    \n    val a = 1985\n    ","val"," other = new OtherStuff()\n    other.doesNothing(a)\n    \n      \n    "]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1003,"sourceSample":["\n    \n    val a = 1985\n    val other = new ","OtherStuff","()\n    other.doesNothing(a)\n    \n      \n    "]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1007,"sourceSample":["\n    val other = new OtherStuff()\n    ","other",".doesNothing(a)\n    \n      \n    // Implicit conversion\n    val A = Rational(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1045,"sourceSample":["\n    val B = 314 + A\n    \n    val double = ","other",".foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }\n    \n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1065,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new ","other",".Key('keyToDouble){ type Value = Double }\n    \n  }\n  \n}"]}],"107":[{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1756,"sourceSample":["\n\nobject RationalExample {\n  \n  ","def"," main(args: Array[String]): Unit = {\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new Rational(1,7)"]}],"13":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":45,"sourceSample":["\n\nobject Example {\n  \n  def main(args: Array[","String","]): Unit = {\n  \n    val A = new Rational(1,7) \n    val B = new Rational(1)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":194,"sourceSample":["/*\n*Companion Object\n*================\n*\n* Test jump to companion object.\n*\n*/\n\nclass Companion(foo: ","String",")\n\nobject Companion {\n  def apply(foo: String) = new Companion(foo)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":210,"sourceSample":["\n\nobject Companion {\n  def apply(foo: ","String",") = new Companion(foo)\n}\n\ntrait CompanionTest {"]}],"99":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1511,"sourceSample":["\n\n  def * (that: Rational) : Rational = multiply(that)  \n  ","def"," * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = subtract(that)"]}],"24":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":125,"sourceSample":["/*\n*Complex stuff\n*-------------\n*\n* We can even understand complex stuff. \n*\n*/\n\n","trait"," Foo {\n\n  trait Bar {\n    val foo = 42"]}],"94":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1357,"sourceSample":["/*\n   * ### Subtraction\n   */\n  ","def"," subtract (that: Rational) : Rational = {\n    new Rational(\n        this.numerator*that.denominator - this.denominator*that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1431,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  def subtract (that: Int) : Rational = ","this",".subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1548,"sourceSample":["  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = ","subtract","(that)\n  def - (that: Int) : Rational = subtract(that)\n\n  "]}],"35":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":205,"sourceSample":["\n\nobject Companion {\n  ","def"," apply(foo: String) = new Companion(foo)\n}\n\ntrait CompanionTest {"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":250,"sourceSample":["\n\n\tdef bar() : Unit = {\n\t\tval a = ","Companion","(\"a\");\n\t}\n\n}"]}],"16":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":92,"sourceSample":[" \n    val B = new Rational(1)\n    val C = ","A"," + B\n   \n    println(A + \" + \" + B + \" = \" + C)\n\n  }"]}],"79":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1035,"sourceSample":["// Implicit conversion\n    val A = Rational(5)\n    val B = ","314"," + A\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1445,"sourceSample":["/*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */\n  ","def"," + (that: Rational) : Rational = add(that)\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1829,"sourceSample":["\n    val C = Rational(77,344)\n    val G = ","A"," + B\n    val D = A.add(B)\n   \n    "]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1856,"sourceSample":["\n   \n    // Implicit conversion\n    val E = ","5"," + D  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1902,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (","C"," + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]}],"5":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":32,"sourceSample":["/*\n* \n*Simple Stuff\n*------------\n*\n* Let's start with simple code.\n*\n*/\n\n","object"," Example {\n  \n  def main(args: Array[String]): Unit = {\n  \n    val A = new Rational(1,7)"]}],"103":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1651,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(b==0) a else gcd(b, ","a"," % b)\n  }\n}"]}],"112":[{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1955,"sourceSample":["/*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */  \n  ","implicit"," def intToRational(l: Int) = Rational(l)\n  \n}"]}],"72":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":939,"sourceSample":["\n  }\n\n  ","val"," someKey = new Key('someKey){ type Value = Int}\n  \n}\n\n\n\nobject OtherStuff{"]}],"59":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":478,"sourceSample":["/*\n * Function Arguments and Currying\n * -------------------------------\n * \n * CurryAndFunctionArg contains methods to test codeprose's support for currying and function arguments.\n */\n","class"," CurryAndFunctionArg(){\n  /*\n   * Function Argument.\n   */"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":672,"sourceSample":["\n  \n}\n\n","object"," CurryAndFunctionArg{\n  \n    val foo = new CurryAndFunctionArg()\n    \n    \n    val curryPartial = foo.currying(5)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":683,"sourceSample":["\n\nobject CurryAndFunctionArg{\n  \n    val foo = new ","CurryAndFunctionArg","()\n    \n    \n    val curryPartial = foo.currying(5)_\n    val curryFull = curryPartial(5)(5)"]}],"48":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":494,"sourceSample":["/*\n   * Function Argument.\n   */\n  def withFunctionArugment(a: Int,","shifter",": (Int) => Int) : Int = {\n    shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":514,"sourceSample":["\n  def withFunctionArugment(a: Int,shifter: (Int) => Int) : Int = {\n    ","shifter","(a)\n  }\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":563,"sourceSample":["\n  }\n  \n  def curryWithFunctionArg(","shifter",": Int => Int)(a: Int)(b: Int) : Int = {\n    shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":593,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    ","shifter","(b) + shifter(a)\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":600,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    shifter(b) + ","shifter","(a)\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":612,"sourceSample":["\n  \n  def curryWithFuncArgImplArg(\n      ","shifter",": Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":654,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + ","shifter","(b) + shifter(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":661,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + ","shifter","(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":717,"sourceSample":["\n    val curryFull = curryPartial(5)(5)\n    \n    ","val"," shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":744,"sourceSample":["\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(","shiftByOne",")_\n    val curryWithFunc = curryWithFuncPartial(5)(5)\n    \n    implicit val base = 4"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":782,"sourceSample":["\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(","shiftByOne",")_\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_"]}],"76":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":969,"sourceSample":["\n\n\n\nobject OtherStuff{\n  \n  ","def"," main(args: Array[String]): Unit = {\n    \n    val a = 1985\n    val other = new OtherStuff()"]}],"54":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":523,"sourceSample":["\n  }\n  \n  ","def"," currying(a: Int)(b: Int)(c: Int) : Int = {\n    a+b+c\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":695,"sourceSample":["\n  \n    val foo = new CurryAndFunctionArg()\n    \n    \n    val curryPartial = ","foo",".currying(5)_\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1"]}],"43":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":40,"sourceSample":["\n\nobject Example {\n  \n  def main(","args",": Array[String]): Unit = {\n  \n    val A = new Rational(1,7) \n    val B = new Rational(1)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":394,"sourceSample":["\n\n\n\nobject ImplicitSuff {\n  \n  def main(","args",": Array[String]): Unit = {\n\n    // Implicit parameter\n    implicit val implicitBase = new Base()"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":971,"sourceSample":["\n\n\n\nobject OtherStuff{\n  \n  def main(","args",": Array[String]): Unit = {\n    \n    val a = 1985\n    val other = new OtherStuff()"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1758,"sourceSample":["\n\nobject RationalExample {\n  \n  def main(","args",": Array[String]): Unit = {\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )\n    val A = new Rational(1,7)"]}],"71":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":933,"sourceSample":["\n  \n  \n  class Key(name: Symbol){\n    ","type"," Value\n  }\n\n  val someKey = new Key('someKey){ type Value = Int}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":953,"sourceSample":["\n  }\n\n  val someKey = new Key('someKey){ ","type"," Value = Int}\n  \n}\n\n\n\nobject OtherStuff{"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1075,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ ","type"," Value = Double }\n    \n  }\n  \n}"]}],"57":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":329,"sourceSample":["\n  def bar(b: Int) : Int = {\n\t\t","b","+c.a\n\t}\n  \n  "]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":371,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    ","a","+b+c.a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":373,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    ","a","+b+c.a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":377,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    ","a","+b+c.a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":552,"sourceSample":["\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {\n    ","a","+b+c\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":554,"sourceSample":["\n  \n  def currying(a: Int)(b: Int)(c: Int) : Int = {\n    ","a","+b+c\n  }\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":598,"sourceSample":["\n  \n  def curryWithFunctionArg(shifter: Int => Int)(a: Int)(b: Int) : Int = {\n    ","shifter","(b) + shifter(a)\n  }\n  \n  def curryWithFuncArgImplArg("]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":652,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    ","base"," + shifter(b) + shifter(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":659,"sourceSample":["\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    ","base"," + shifter(b) + shifter(a)\n  }\n  \n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":731,"sourceSample":["\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: Int) => ","x","+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":821,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => ","x"," + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]}],"108":[{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1864,"sourceSample":["// Implicit conversion\n    val E = 5 + D  \n    println(","A"," + \" + \" + B + \" = \" + C)\n    println(C + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1885,"sourceSample":["  \n    println(A + \" + \" + B + \" = \" + C)\n    println(","C"," + \" + \" + D + \" = \" + (C + D))\n    println(5 + \" + \" + D + \" = \" + E)\n\n  }"]}],"32":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":189,"sourceSample":["/*\n*Companion Object\n*================\n*\n* Test jump to companion object.\n*\n*/\n\n","class"," Companion(foo: String)\n\nobject Companion {\n  def apply(foo: String) = new Companion(foo)"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":199,"sourceSample":["\n\nclass Companion(foo: String)\n\n","object"," Companion {\n  def apply(foo: String) = new Companion(foo)\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":217,"sourceSample":["\n\nobject Companion {\n  def apply(foo: String) = new ","Companion","(foo)\n}\n\ntrait CompanionTest {"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":246,"sourceSample":["\n\n\tdef bar() : Unit = {\n\t\t","val"," a = Companion(\"a\");\n\t}\n\n}"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":250,"sourceSample":["\n\n\tdef bar() : Unit = {\n\t\tval a = ","Companion","(\"a\");\n\t}\n\n}"]}],"80":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1041,"sourceSample":["\n    val B = 314 + A\n    \n    ","val"," double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }\n    \n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1049,"sourceSample":["\n    val B = 314 + A\n    \n    val double = other.foo[","Double","](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = Double }\n    \n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1079,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ type Value = ","Double"," }\n    \n  }\n  \n}"]}],"106":[{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1750,"sourceSample":["/*\n * Example with Rational Numbers\n * -----------------------------\n *\n * A sample application highlighting some features of <strong>org.codeprose.test.Rational</strong>.\n * \n * Codeprose is available on [github.com/gushai/codeprose](https://github.com/gushai/codeprose).\n */\n\n","object"," RationalExample {\n  \n  def main(args: Array[String]): Unit = {\n  \n    println(\"[org.codeprose.rational.Example]: Sample Application.\" )"]}],"82":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":933,"sourceSample":["\n  \n  \n  class Key(name: Symbol){\n    ","type"," Value\n  }\n\n  val someKey = new Key('someKey){ type Value = Int}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":953,"sourceSample":["\n  }\n\n  val someKey = new Key('someKey){ ","type"," Value = Int}\n  \n}\n\n\n\nobject OtherStuff{"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1075,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new other.Key('keyToDouble){ ","type"," Value = Double }\n    \n  }\n  \n}"]}],"49":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":487,"sourceSample":["/*\n   * Function Argument.\n   */\n  ","def"," withFunctionArugment(a: Int,shifter: (Int) => Int) : Int = {\n    shifter(a)\n  }"]}],"36":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":226,"sourceSample":["\n}\n\n","trait"," CompanionTest {\n\n\tdef bar() : Unit = {\n\t\tval a = Companion(\"a\");"]}],"1":[{"srcFilename":"/!README.scala","link":"/content/_!README.scala.html","tokenId":5,"sourceSample":["package ","org",".codeprose.test.text\n/*\n * Codeprose Test Project \n * ======================\n *\n *\n * Content\n * -------\n * \n * 1. What is Codeprose?\n * 2. How to Use Codeprose?\n * 3. Supported Markdown Features\n *  \n * \n * What is Codeprose?\n * ------------------\n * \n * Codeprose is a literate programming tool for Scala. It generates HTML output including \n * syntax highlighting and source code annotated with compile time information. \n * \n * Tokens are enriched with detailed type information, links to declaration and \n * type definition as well as information about implicit conversions and parameters. \n * \n * Further, both type and package summaries as well as 'where used' information is provided.\n *  \n * In the spirit of literate programming Codeprose allows syntax formatting via Markdown \n * in comments. Compile time information is obtained by interfacing with the editor \n * service ENSIME which guarantees independence from the Scala compiler and improves \n * re-usability and maintenance.\n *   \n * Codeprose's design makes it easily extendible to other or mixtures of languages and \n * offers the possibility of introducing other output formats such as, for example, LaTeX.\n *\n *\n */"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":22,"sourceSample":["package ","org",".codeprose.test\n\n/*\n*Test Codeprose Features\n*=======================\n*\n* Included are some code example to test Codeprose's supported features.\n* \n* Overview\n* --------\n* \n* 1.  Simple Stuff\n* 2.  Complex Stuff\n* 3.  Companion Object\n* \n*/"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":264,"sourceSample":["package ","org",".codeprose.test\n/*\n*More Examples\n*=============\n*\n* The source code in this file has been used to test Codeprose's handling of implicit conversions and parameters,  \n* function arguments and currying as well as type arguments.\n* \n* Content\n* -------\n* \n* 1. Implicit Conversions/Parameter\n* 2. Function Arguments and Currying\n* 3. Other Stuff\n* \n*/"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1091,"sourceSample":["package ","org",".codeprose.test\n/*\n * Rational \n * ========\n * \n * **Rational** implements **rational numbers** in Scala to introduce some of the \n * basic Scala concepts and highlight [codeprose](http://example.com/ \"codeprose on github\").\n *\n *It offers:\n *\n * +\tAddition (<code>add()</code> and <code>+</code>)\n * +\tSubtraction (<code>subtract()</code> and <code>-</code>)\n * +\tMultiplication (<code>multiply()</code> and <code>*</code>)\n * +\tImplicit conversion of <code>Int</code>\n * +\tAutomatic reduction\n * +\tAnd more ...\n */"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1742,"sourceSample":["package ","org",".codeprose.test\n/*\n * Example with Rational Numbers\n * -----------------------------\n *\n * A sample application highlighting some features of <strong>org.codeprose.test.Rational</strong>.\n * \n * Codeprose is available on [github.com/gushai/codeprose](https://github.com/gushai/codeprose).\n */"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1937,"sourceSample":["package ","org",".codeprose.test\n\npackage object rational {\n   \n  "]}],"39":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":295,"sourceSample":["/*\n * ImplictStuff contains uses implicit parameters.\n */\n","class"," ImplicitStuff()(implicit c: Base){\n\n \n  /**\n   * bar uses an implicit parameter of SomeClass.\n   */"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":428,"sourceSample":["// Implicit parameter\n    implicit val implicitBase = new Base()\n\n    ","val"," foo = new ImplicitStuff()\n\n    foo.bar(1)  \n\n    implicit val shift = 10"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":434,"sourceSample":["// Implicit parameter\n    implicit val implicitBase = new Base()\n\n    val foo = new ","ImplicitStuff","()\n\n    foo.bar(1)  \n\n    implicit val shift = 10"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":438,"sourceSample":["\n\n    val foo = new ImplicitStuff()\n\n    ","foo",".bar(1)  \n\n    implicit val shift = 10\n    \n    val somenumber = foo.add(1,2)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":461,"sourceSample":["  \n\n    implicit val shift = 10\n    \n    val somenumber = ","foo",".add(1,2)\n    \n\n  }\n}"]}],"25":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":131,"sourceSample":["\n\ntrait Foo {\n\n  ","trait"," Bar {\n    val foo = 42\n  }"]}],"60":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":689,"sourceSample":["\n  \n    val foo = new CurryAndFunctionArg()\n    \n    \n    ","val"," curryPartial = foo.currying(5)_\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":707,"sourceSample":["\n    \n    \n    val curryPartial = foo.currying(5)_\n    val curryFull = ","curryPartial","(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":736,"sourceSample":["\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    ","val"," curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)\n    \n    implicit val base = 4"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":754,"sourceSample":["\n    \n    val curryWithFuncPartial = foo.curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = ","curryWithFuncPartial","(5)(5)\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":774,"sourceSample":["\n    \n    implicit val base = 4\n \n    ","val"," curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":792,"sourceSample":["\n \n    val curryWithFuncAndImplicitPartial = foo.curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = ","curryWithFuncAndImplicitPartial","(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":802,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    ","val"," curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":833,"sourceSample":["\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = ","curryWithAnonFuncAndImplPart","(11)(11)\n}\n\n\n"]}],"47":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":478,"sourceSample":["/*\n * Function Arguments and Currying\n * -------------------------------\n * \n * CurryAndFunctionArg contains methods to test codeprose's support for currying and function arguments.\n */\n","class"," CurryAndFunctionArg(){\n  /*\n   * Function Argument.\n   */"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":672,"sourceSample":["\n  \n}\n\n","object"," CurryAndFunctionArg{\n  \n    val foo = new CurryAndFunctionArg()\n    \n    \n    val curryPartial = foo.currying(5)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":677,"sourceSample":["\n\nobject CurryAndFunctionArg{\n  \n    ","val"," foo = new CurryAndFunctionArg()\n    \n    \n    val curryPartial = foo.currying(5)_\n    val curryFull = curryPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":683,"sourceSample":["\n\nobject CurryAndFunctionArg{\n  \n    val foo = new ","CurryAndFunctionArg","()\n    \n    \n    val curryPartial = foo.currying(5)_\n    val curryFull = curryPartial(5)(5)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":693,"sourceSample":["\n  \n    val foo = new CurryAndFunctionArg()\n    \n    \n    val curryPartial = ","foo",".currying(5)_\n    val curryFull = curryPartial(5)(5)\n    \n    val shiftByOne = (x: Int) => x+1"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":740,"sourceSample":["\n    \n    val shiftByOne = (x: Int) => x+1\n    \n    val curryWithFuncPartial = ","foo",".curryWithFunctionArg(shiftByOne)_\n    val curryWithFunc = curryWithFuncPartial(5)(5)\n    \n    implicit val base = 4"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":778,"sourceSample":["\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = ","foo",".curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":806,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = ","foo",".curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]}],"111":[{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1943,"sourceSample":["package org.codeprose.test\n\n","package"," object rational {\n   \n  /*\n   * ### Implicit conversions\n   *\n   * The implicit conversion which allows a simple addition of an Int with a Rational number.\n   */"]}],"102":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1581,"sourceSample":["/*\n   * Visibly appealing toString() output.\n   */\n  ","override"," def toString = \"(\" + numerator + \"/\" + denominator + \")\"\n  \n  /*\n   * ### GCD: Greatest Common Divisor\n   *\n   * Calculates the gcd. Used in the constructor to automatically reduce the represented fraction.\n   *\n   */"]}],"31":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":181,"sourceSample":["\n  }\n\n  ","trait"," Boo\n\n}\n\n"]}],"96":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1414,"sourceSample":["/*\n   * Overloaded Subtraction\n   * \n   * Allows the subtraction of an Int from a Rational number.\n   */\n  ","def"," subtract (that: Int) : Rational = this.subtract(new Rational(that))\n\n  /*\n   * ### Operator Overloading\n   *\n   * For:\n   *\n   * +\tAddition\n   * +\tSubtraction\n   * +\tMultiplication\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1570,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  def - (that: Int) : Rational = ","subtract","(that)\n\n  /*\n   * Visibly appealing toString() output.\n   */"]}],"69":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":922,"sourceSample":["\n  }\n  \n  \n  ","class"," Key(name: Symbol){\n    type Value\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":945,"sourceSample":["\n  }\n\n  val someKey = new ","Key","('someKey){ type Value = Int}\n  \n}\n\n\n\nobject OtherStuff{"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1067,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    val keyToDouble = new ","other",".Key('keyToDouble){ type Value = Double }\n    \n  }\n  \n}"]}],"95":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1387,"sourceSample":["\n    new Rational(\n        ","this",".numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]}],"58":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":609,"sourceSample":["\n  }\n  \n  ","def"," curryWithFuncArgImplArg(\n      shifter: Int => Int)(a: Int)(b: Int)(implicit base: Int) : Int = {\n    base + shifter(b) + shifter(a)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":780,"sourceSample":["\n    \n    implicit val base = 4\n \n    val curryWithFuncAndImplicitPartial = ","foo",".curryWithFuncArgImplArg(shiftByOne)_\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = foo.curryWithFuncArgImplArg((x: Int) => x + 314)_"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":808,"sourceSample":["\n    val curryWithFuncAndImplicit = curryWithFuncAndImplicitPartial(10)(10)\n    \n    \n    val curryWithAnonFuncAndImplPart = ","foo",".curryWithFuncArgImplArg((x: Int) => x + 314)_\n    val curryWithAnonFuncAndImpl = curryWithAnonFuncAndImplPart(11)(11)\n}"]}],"64":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":864,"sourceSample":["\n    \n  def notImplemented() = ???\n  \n  ","def"," doesNothing(a: Int) : Unit = {\n    \n  }\n  \n  def foo[T](a: Int, b: T) : T = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1009,"sourceSample":["\n    val other = new OtherStuff()\n    ","other",".doesNothing(a)\n    \n      \n    // Implicit conversion\n    val A = Rational(5)"]}],"42":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":386,"sourceSample":["\n}\n\n\n\n","object"," ImplicitSuff {\n  \n  def main(args: Array[String]): Unit = {\n\n    "]}],"75":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":847,"sourceSample":["/*\n * Other Stuff\n * ----------- \n */\n","class"," OtherStuff(){\n    \n  def notImplemented() = ???\n  \n  def doesNothing(a: Int) : Unit = {"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":964,"sourceSample":["\n  \n}\n\n\n\n","object"," OtherStuff{\n  \n  def main(args: Array[String]): Unit = {\n    \n    val a = 1985"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1003,"sourceSample":["\n    \n    val a = 1985\n    val other = new ","OtherStuff","()\n    other.doesNothing(a)\n    \n      \n    "]}],"20":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":100,"sourceSample":["\n    val C = A + B\n   \n    println(","A"," + \" + \" + B + \" = \" + C)\n\n  }\n}"]}],"27":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":147,"sourceSample":["\n  }\n\n  ","object"," innerobject {\n    trait Baz {}\n  }"]}],"70":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":924,"sourceSample":["\n  }\n  \n  \n  class Key(","name",": Symbol){\n    type Value\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":927,"sourceSample":["\n  }\n  \n  \n  class Key(name: ","Symbol","){\n    type Value\n  }"]}],"2":[{"srcFilename":"/!README.scala","link":"/content/_!README.scala.html","tokenId":3,"sourceSample":["package ","org",".codeprose.test.text\n/*\n * Codeprose Test Project \n * ======================\n *\n *\n * Content\n * -------\n * \n * 1. What is Codeprose?\n * 2. How to Use Codeprose?\n * 3. Supported Markdown Features\n *  \n * \n * What is Codeprose?\n * ------------------\n * \n * Codeprose is a literate programming tool for Scala. It generates HTML output including \n * syntax highlighting and source code annotated with compile time information. \n * \n * Tokens are enriched with detailed type information, links to declaration and \n * type definition as well as information about implicit conversions and parameters. \n * \n * Further, both type and package summaries as well as 'where used' information is provided.\n *  \n * In the spirit of literate programming Codeprose allows syntax formatting via Markdown \n * in comments. Compile time information is obtained by interfacing with the editor \n * service ENSIME which guarantees independence from the Scala compiler and improves \n * re-usability and maintenance.\n *   \n * Codeprose's design makes it easily extendible to other or mixtures of languages and \n * offers the possibility of introducing other output formats such as, for example, LaTeX.\n *\n *\n */"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":20,"sourceSample":["package ","org",".codeprose.test\n\n/*\n*Test Codeprose Features\n*=======================\n*\n* Included are some code example to test Codeprose's supported features.\n* \n* Overview\n* --------\n* \n* 1.  Simple Stuff\n* 2.  Complex Stuff\n* 3.  Companion Object\n* \n*/"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":262,"sourceSample":["package ","org",".codeprose.test\n/*\n*More Examples\n*=============\n*\n* The source code in this file has been used to test Codeprose's handling of implicit conversions and parameters,  \n* function arguments and currying as well as type arguments.\n* \n* Content\n* -------\n* \n* 1. Implicit Conversions/Parameter\n* 2. Function Arguments and Currying\n* 3. Other Stuff\n* \n*/"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1089,"sourceSample":["package ","org",".codeprose.test\n/*\n * Rational \n * ========\n * \n * **Rational** implements **rational numbers** in Scala to introduce some of the \n * basic Scala concepts and highlight [codeprose](http://example.com/ \"codeprose on github\").\n *\n *It offers:\n *\n * +\tAddition (<code>add()</code> and <code>+</code>)\n * +\tSubtraction (<code>subtract()</code> and <code>-</code>)\n * +\tMultiplication (<code>multiply()</code> and <code>*</code>)\n * +\tImplicit conversion of <code>Int</code>\n * +\tAutomatic reduction\n * +\tAnd more ...\n */"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1740,"sourceSample":["package ","org",".codeprose.test\n/*\n * Example with Rational Numbers\n * -----------------------------\n *\n * A sample application highlighting some features of <strong>org.codeprose.test.Rational</strong>.\n * \n * Codeprose is available on [github.com/gushai/codeprose](https://github.com/gushai/codeprose).\n */"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1935,"sourceSample":["package ","org",".codeprose.test\n\npackage object rational {\n   \n  "]}],"86":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1132,"sourceSample":["\n\n  require(d!=0)\n  private val g = ","gcd","(n,d)\n  val numerator   = n/g\n  val denominator = d/g"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1611,"sourceSample":["/**\n   * Calculates the greatest common divisor.\n   * @param a A whole number\n   * @param b A whole number\n   * @return The largest positive integer that divides a and b without a remainder.\n   */\t\n  ","private"," def gcd(a: Int, b: Int) : Int = {\n    if(b==0) a else gcd(b, a % b)\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1644,"sourceSample":["\t\n  private def gcd(a: Int, b: Int) : Int = {\n    if(b==0) a else ","gcd","(b, a % b)\n  }\n}"]}],"38":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":276,"sourceSample":["/*\n * A simple base class.\n */\n","class"," Base(){\n\tval a = 1\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":301,"sourceSample":["/*\n * ImplictStuff contains uses implicit parameters.\n */\nclass ImplicitStuff()(implicit ","c",": Base){\n\n \n  /**\n   * bar uses an implicit parameter of SomeClass.\n   */"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":304,"sourceSample":["/*\n * ImplictStuff contains uses implicit parameters.\n */\nclass ImplicitStuff()(implicit c: ","Base","){\n\n \n  /**\n   * bar uses an implicit parameter of SomeClass.\n   */"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":330,"sourceSample":["\n  def bar(b: Int) : Int = {\n\t\tb+","c",".a\n\t}\n  \n  "]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":374,"sourceSample":["\n  def add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    a+b+","c",".a+shift\n  }\n}"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":416,"sourceSample":["\n\n    // Implicit parameter\n    implicit ","val"," implicitBase = new Base()\n\n    val foo = new ImplicitStuff()\n\n    foo.bar(1)"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":422,"sourceSample":["\n\n    // Implicit parameter\n    implicit val implicitBase = new ","Base","()\n\n    val foo = new ImplicitStuff()\n\n    foo.bar(1)"]}],"81":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":1059,"sourceSample":["\n    \n    val double = other.foo[Double](1,1.0)\n    \n    \n    ","val"," keyToDouble = new other.Key('keyToDouble){ type Value = Double }\n    \n  }\n  \n}"]}],"92":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1209,"sourceSample":[" \n    new Rational(\n        ","this",".numerator*that.denominator + that.numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1219,"sourceSample":[" \n    new Rational(\n        this.numerator*that.denominator + ","that",".numerator*this.denominator,\n        this.denominator*that.denominator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1228,"sourceSample":["\n        this.numerator*that.denominator + that.numerator*this.denominator,\n        ","this",".denominator*that.denominator\n        )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1302,"sourceSample":["\n      new Rational(\n          ","this",".numerator * that.numerator,\n          this.denominator * that.denominator\n          )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1313,"sourceSample":["\n          this.numerator * that.numerator,\n          ","this",".denominator * that.denominator\n          )\n  }"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1382,"sourceSample":["\n    new Rational(\n        ","this",".numerator*that.denominator - this.denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1392,"sourceSample":["\n    new Rational(\n        this.numerator*that.denominator - ","this",".denominator*that.numerator,\n        this.denominator*that.numerator\n        )"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1401,"sourceSample":["\n        this.numerator*that.denominator - this.denominator*that.numerator,\n        ","this",".denominator*that.numerator\n        )\n  }"]}],"18":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":96,"sourceSample":["\n    val C = A + B\n   \n    ","println","(A + \" + \" + B + \" = \" + C)\n\n  }\n}"]}],"101":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1555,"sourceSample":["\n\n  def - (that: Rational) : Rational = subtract(that)\n  ","def"," - (that: Int) : Rational = subtract(that)\n\n  /*\n   * Visibly appealing toString() output.\n   */"]}],"30":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":175,"sourceSample":["\n\n  val x = () => {\n    ","trait"," Boo\n  }\n\n  trait Boo"]}],"97":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1467,"sourceSample":["\n  def + (that: Rational) : Rational = add(that)\n  ","def"," + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = multiply(that)  \n  def * (that: Int) : Rational = multiply(that)"]}],"29":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":162,"sourceSample":["\n  }\n\n  ","val"," x = () => {\n    trait Boo\n  }"]}],"41":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":340,"sourceSample":["/**\n   * add uses an implicit parameter of SomeClass and an implicit parameter shift.\n   * @param a     Integer\n   * @param b     Integer\n   * @param shit  Integer \n   * @param       Additon of a,b,shift and c.a\n   */\n  ","def"," add(a: Int, b: Int)(implicit shift: Int) : Int = {\n    a+b+c.a+shift\n  }"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":463,"sourceSample":["  \n\n    implicit val shift = 10\n    \n    val somenumber = ","foo",".add(1,2)\n    \n\n  }\n}"]}],"105":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1720,"sourceSample":["\n  def apply(n: Int, d: Int) = new Rational(n,d)\n\n  ","implicit"," def intToRational(l: Int) = Rational(l)\n}\n\n"]}],"63":[{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":860,"sourceSample":["\nclass OtherStuff(){\n    \n  def notImplemented() = ","???","\n  \n  def doesNothing(a: Int) : Unit = {\n    \n  }"]}],"3":[{"srcFilename":"/!README.scala","link":"/content/_!README.scala.html","tokenId":7,"sourceSample":["package ","org",".codeprose.test.text\n/*\n * Codeprose Test Project \n * ======================\n *\n *\n * Content\n * -------\n * \n * 1. What is Codeprose?\n * 2. How to Use Codeprose?\n * 3. Supported Markdown Features\n *  \n * \n * What is Codeprose?\n * ------------------\n * \n * Codeprose is a literate programming tool for Scala. It generates HTML output including \n * syntax highlighting and source code annotated with compile time information. \n * \n * Tokens are enriched with detailed type information, links to declaration and \n * type definition as well as information about implicit conversions and parameters. \n * \n * Further, both type and package summaries as well as 'where used' information is provided.\n *  \n * In the spirit of literate programming Codeprose allows syntax formatting via Markdown \n * in comments. Compile time information is obtained by interfacing with the editor \n * service ENSIME which guarantees independence from the Scala compiler and improves \n * re-usability and maintenance.\n *   \n * Codeprose's design makes it easily extendible to other or mixtures of languages and \n * offers the possibility of introducing other output formats such as, for example, LaTeX.\n *\n *\n */"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":24,"sourceSample":["package ","org",".codeprose.test\n\n/*\n*Test Codeprose Features\n*=======================\n*\n* Included are some code example to test Codeprose's supported features.\n* \n* Overview\n* --------\n* \n* 1.  Simple Stuff\n* 2.  Complex Stuff\n* 3.  Companion Object\n* \n*/"]},{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":24,"sourceSample":["","package"," org.codeprose.test\n\n/*\n*Test Codeprose Features\n*=======================\n*\n* Included are some code example to test Codeprose's supported features.\n* \n* Overview\n* --------\n* \n* 1.  Simple Stuff\n* 2.  Complex Stuff\n* 3.  Companion Object\n* \n*/"]},{"srcFilename":"/MoreExample.scala","link":"/content/_MoreExample.scala.html","tokenId":266,"sourceSample":["package ","org",".codeprose.test\n/*\n*More Examples\n*=============\n*\n* The source code in this file has been used to test Codeprose's handling of implicit conversions and parameters,  \n* function arguments and currying as well as type arguments.\n* \n* Content\n* -------\n* \n* 1. Implicit Conversions/Parameter\n* 2. Function Arguments and Currying\n* 3. Other Stuff\n* \n*/"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1093,"sourceSample":["package ","org",".codeprose.test\n/*\n * Rational \n * ========\n * \n * **Rational** implements **rational numbers** in Scala to introduce some of the \n * basic Scala concepts and highlight [codeprose](http://example.com/ \"codeprose on github\").\n *\n *It offers:\n *\n * +\tAddition (<code>add()</code> and <code>+</code>)\n * +\tSubtraction (<code>subtract()</code> and <code>-</code>)\n * +\tMultiplication (<code>multiply()</code> and <code>*</code>)\n * +\tImplicit conversion of <code>Int</code>\n * +\tAutomatic reduction\n * +\tAnd more ...\n */"]},{"srcFilename":"/RationalExample.scala","link":"/content/_RationalExample.scala.html","tokenId":1744,"sourceSample":["package ","org",".codeprose.test\n/*\n * Example with Rational Numbers\n * -----------------------------\n *\n * A sample application highlighting some features of <strong>org.codeprose.test.Rational</strong>.\n * \n * Codeprose is available on [github.com/gushai/codeprose](https://github.com/gushai/codeprose).\n */"]},{"srcFilename":"/package.scala","link":"/content/_package.scala.html","tokenId":1939,"sourceSample":["package ","org",".codeprose.test\n\npackage object rational {\n   \n  "]}],"91":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1276,"sourceSample":["/*\n   * ### Multiplication\n   */\n  ","def"," multiply (that: Rational) : Rational = {\n      new Rational(\n          this.numerator * that.numerator,"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1343,"sourceSample":["/*\n   * Overloaded Multiplication\n   * \n   * Allows the multiplication of a Rational number with an Int.\n   */\n  def multiply(that: Int) : Rational = ","this",".multiply(new Rational(that))\n  \n  /*\n   * ### Subtraction\n   */"]},{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1504,"sourceSample":["\n  def + (that: Int) : Rational = add(that)\n\n  def * (that: Rational) : Rational = ","multiply","(that)  \n  def * (that: Int) : Rational = multiply(that)\n\n  def - (that: Rational) : Rational = subtract(that)"]}],"85":[{"srcFilename":"/Rational.scala","link":"/content/_Rational.scala.html","tokenId":1117,"sourceSample":["\nclass Rational (n: Int, d: Int){\n\n  ","require","(d!=0)\n  private val g = gcd(n,d)\n  val numerator   = n/g"]}],"28":[{"srcFilename":"/Example.scala","link":"/content/_Example.scala.html","tokenId":153,"sourceSample":["\n\n  object innerobject {\n    ","trait"," Baz {}\n  }\n\n  val x = () => {"]}]}